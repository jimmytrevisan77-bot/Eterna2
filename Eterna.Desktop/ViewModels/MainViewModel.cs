using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using Eterna.Desktop.Commands;
using Eterna.Desktop.Models;

namespace Eterna.Desktop.ViewModels;

public class MainViewModel : INotifyPropertyChanged
{
    private ModuleCategory? _selectedModule;
    private string _statusBanner = "Pr√™t pour la prochaine it√©ration";

    public ObservableCollection<ModuleCategory> ModuleCategories { get; } = new();
    public ObservableCollection<BackupRecord> BackupVault { get; } = new();
    public ObservableCollection<ChangeRequest> ChangeQueue { get; } = new();
    public ObservableCollection<WatcherItem> Watchers { get; } = new();
    public ObservableCollection<AutonomyLogEntry> AutonomyLogs { get; } = new();
    public ObservableCollection<EmotionProfile> EmotionProfiles { get; } = new();

    public RelayCommand CreateBackupCommand { get; }
    public RelayCommand ApproveChangeCommand { get; }
    public RelayCommand RejectChangeCommand { get; }
    public RelayCommand ClearBannerCommand { get; }

    public MainViewModel()
    {
        SeedModules();
        SeedOperationalData();

        CreateBackupCommand = new RelayCommand(_ => CreateBackup());
        ApproveChangeCommand = new RelayCommand(param => UpdateChangeStatus(param as ChangeRequest, "Valid√©"));
        RejectChangeCommand = new RelayCommand(param => UpdateChangeStatus(param as ChangeRequest, "Rejet√©"));
        ClearBannerCommand = new RelayCommand(() => StatusBanner = "");

        SelectedModule = ModuleCategories.FirstOrDefault();
    }

    public ModuleCategory? SelectedModule
    {
        get => _selectedModule;
        set
        {
            if (_selectedModule != value)
            {
                _selectedModule = value;
                OnPropertyChanged();
            }
        }
    }

    public string StatusBanner
    {
        get => _statusBanner;
        set
        {
            if (_statusBanner != value)
            {
                _statusBanner = value;
                OnPropertyChanged();
            }
        }
    }

    public event PropertyChangedEventHandler? PropertyChanged;

    private void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

    private void SeedModules()
    {
        ModuleCategories.Clear();

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "LT",
            Title = "üß† M√©moire long terme (travail / personnel)",
            Objective = "Permettre √† Eterna de se souvenir durablement et de s√©parer m√©moire personnelle et professionnelle.",
            Impact = "Garantit la continuit√© des projets et l'empathie durable.",
            Priority = "Critique",
            Icon = "üß†",
            Libraries = new[]
            {
                new ModuleLibrary("ChromaDB", "M√©moire vectorielle l√©g√®re.", "https://github.com/chroma-core/chroma"),
                new ModuleLibrary("FAISS", "Recherche vectorielle rapide par Meta.", "https://github.com/facebookresearch/faiss"),
                new ModuleLibrary("LangChain Memory", "Gestion m√©moire conversationnelle.", "https://github.com/langchain-ai/langchain"),
                new ModuleLibrary("TinyDB", "Base locale JSON pour pr√©f√©rences.", "https://github.com/msiemens/tinydb"),
                new ModuleLibrary("Weaviate", "Base de m√©moire vectorielle compl√®te auto-h√©bergeable.", "https://github.com/weaviate/weaviate")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "NLU",
            Title = "üí¨ Compr√©hension naturelle du langage",
            Objective = "Comprendre le langage humain sans commandes sp√©cifiques.",
            Impact = "Acc√®s instantan√© aux intentions utilisateurs.",
            Priority = "Critique",
            Icon = "üí¨",
            Libraries = new[]
            {
                new ModuleLibrary("Transformers", "Support LLaMA 3, Mistral, etc.", "https://github.com/huggingface/transformers"),
                new ModuleLibrary("FastIntent", "D√©tection automatique des intentions.", "https://github.com/paulovn/fastintent"),
                new ModuleLibrary("Rasa NLU", "Parsing contextuel des requ√™tes.", "https://github.com/RasaHQ/rasa"),
                new ModuleLibrary("spaCy + neuralcoref", "Compr√©hension linguistique avanc√©e.", "https://github.com/explosion/spaCy"),
                new ModuleLibrary("ParlAI", "Mod√®les de dialogue contextuels.", "https://github.com/facebookresearch/ParlAI")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "EMO",
            Title = "‚ù§Ô∏è Compr√©hension et gestion √©motionnelle",
            Objective = "D√©tecter, comprendre et r√©agir aux √©motions dans la voix, le texte ou les images.",
            Impact = "Renforce la confiance et la co-cr√©ation empathique.",
            Priority = "Priorit√© haute",
            Icon = "‚ù§Ô∏è",
            Libraries = new[]
            {
                new ModuleLibrary("HSEmotion", "Reconnaissance des √©motions faciales.", "https://github.com/av-savchenko/hsemotion"),
                new ModuleLibrary("DeepFace", "Reconnaissance faciale et √©motionnelle.", "https://github.com/serengil/deepface"),
                new ModuleLibrary("Emotion-LLaMA", "Analyse multimodale texte/audio/visuel.", "https://github.com/ZebangCheng/Emotion-LLaMA"),
                new ModuleLibrary("SpeechBrain Emotion", "D√©tection √©motionnelle vocale.", "https://github.com/speechbrain/speechbrain"),
                new ModuleLibrary("Affectiva SDK", "Analyse √©motionnelle visuelle commerciale.", "https://github.com/Affectiva/affdexme")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "PC",
            Title = "üíª Contr√¥le total du PC (hors achats)",
            Objective = "Permettre √† Eterna de g√©rer le PC, les fichiers, logiciels, p√©riph√©riques et RGB.",
            Impact = "Automatisation compl√®te de l'environnement utilisateur.",
            Priority = "Priorit√© haute",
            Icon = "üíª",
            Libraries = new[]
            {
                new ModuleLibrary("PyAutoGUI", "Automatisation clavier/souris/√©cran.", "https://github.com/asweigart/pyautogui"),
                new ModuleLibrary("Psutil", "Monitoring CPU, GPU, RAM.", "https://github.com/giampaolo/psutil"),
                new ModuleLibrary("OpenRGB SDK", "Gestion lumi√®re RGB.", "https://github.com/CalcProgrammer1/OpenRGB"),
                new ModuleLibrary("PyPsexec", "Ex√©cution de commandes Windows.", "https://github.com/jborean93/pypsexec"),
                new ModuleLibrary("Keyboard / Mouse", "Gestion directe des entr√©es physiques.", "https://github.com/boppreh/keyboard")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "AUTO",
            Title = "üß© Auto-modification du code + backup",
            Objective = "Permettre √† Eterna de r√©√©crire ses propres modules localement avec sauvegarde automatique.",
            Impact = "Autonomie contr√¥l√©e et s√©curis√©e.",
            Priority = "Critique",
            Icon = "üß©",
            Libraries = new[]
            {
                new ModuleLibrary("GitPython", "Commits et rollbacks automatiques.", "https://github.com/gitpython-developers/GitPython"),
                new ModuleLibrary("OpenDevin", "Agents d'auto-codage.", "https://github.com/OpenDevin/OpenDevin"),
                new ModuleLibrary("Awesome LLM Agents", "Catalogue de frameworks d'agents.", "https://github.com/yoheinakajima/awesome-llm-agents"),
                new ModuleLibrary("Guardrails.ai", "Validation et s√©curit√© du code g√©n√©r√©.", "https://github.com/ShreyaR/guardrails"),
                new ModuleLibrary("GitBackupPy", "Backups automatiques de projets.", "https://github.com/jkallini/git-backup-py")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "VIS",
            Title = "üñºÔ∏è Upscale / retouche visuelle automatique",
            Objective = "Am√©liorer les designs, corriger d√©fauts, restaurer visuels et upscaler automatiquement.",
            Impact = "Rendu premium des cr√©ations visuelles.",
            Priority = "Priorit√© haute",
            Icon = "üñºÔ∏è",
            Libraries = new[]
            {
                new ModuleLibrary("Real-ESRGAN", "Super-r√©solution IA.", "https://github.com/xinntao/Real-ESRGAN"),
                new ModuleLibrary("GIMP-Python", "Automatisation des retouches via GIMP.", "https://github.com/GNOME/gimp"),
                new ModuleLibrary("GFPGAN", "Restauration et am√©lioration des visages.", "https://github.com/TencentARC/GFPGAN"),
                new ModuleLibrary("StableSR", "Upscale par diffusion.", "https://github.com/Iceclear/StableSR"),
                new ModuleLibrary("RemBG", "Suppression automatique de fond.", "https://github.com/danielgatis/rembg")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "COM",
            Title = "üõí Gestion e-commerce (Shopify, Printify, Etsy)",
            Objective = "G√©rer produits, SEO, prix, descriptions, images et publications automatiques.",
            Impact = "Mon√©tisation et distribution automatis√©es.",
            Priority = "Priorit√© moyenne",
            Icon = "üõí",
            Libraries = new[]
            {
                new ModuleLibrary("ShopifyAPI", "Int√©gration compl√®te Shopify.", "https://github.com/Shopify/shopify_python_api"),
                new ModuleLibrary("PrintifyAPI", "Wrapper non officiel.", "https://github.com/ralphbean/printify-api"),
                new ModuleLibrary("Etsy OpenAPI", "SDK officiel Etsy.", "https://github.com/Etsy/open-api"),
                new ModuleLibrary("SEO-Analyzer", "Audit SEO automatique.", "https://github.com/seomoz/SEO-Analyzer"),
                new ModuleLibrary("BeautifulSoup + Requests", "Scrapping tendances Etsy/Printify.", "https://github.com/psf/requests")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "IOS",
            Title = "üì± Synchronisation iOS (remote)",
            Objective = "Contr√¥ler Eterna depuis iPhone, ex√©cution vocale et visuelle √† distance.",
            Impact = "Accessibilit√© totale des fonctionnalit√©s IA.",
            Priority = "Priorit√© moyenne",
            Icon = "üì±",
            Libraries = new[]
            {
                new ModuleLibrary("FastAPI WebSocket", "Communication locale bidirectionnelle.", "https://github.com/tiangolo/fastapi"),
                new ModuleLibrary("Python-Socket.IO", "Liaison directe PC ‚Üî iOS.", "https://github.com/miguelgrinberg/python-socketio"),
                new ModuleLibrary("PyNgrok", "Tunnel s√©curis√© entre appareils.", "https://github.com/alexdlaird/ngrok"),
                new ModuleLibrary("SwiftNIO", "Pile r√©seau native iOS.", "https://github.com/apple/swift-nio"),
                new ModuleLibrary("React Native Bridge", "App hybride optionnelle.", "https://github.com/facebook/react-native")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "SEC",
            Title = "üîê S√©curit√© adaptative et biom√©trique",
            Objective = "Authentification par voix ou comportement, verrouillage intelligent.",
            Impact = "S√©curise l'autonomie locale d'Eterna.",
            Priority = "Critique",
            Icon = "üîê",
            Libraries = new[]
            {
                new ModuleLibrary("SpeechBrain Speaker Verification", "Authentification vocale.", "https://github.com/speechbrain/speechbrain"),
                new ModuleLibrary("FaceNet", "Reconnaissance visage pour login.", "https://github.com/davidsandberg/facenet"),
                new ModuleLibrary("PyOTP", "Double authentification locale.", "https://github.com/pyauth/pyotp"),
                new ModuleLibrary("Cryptography", "Chiffrement de fichiers sensibles.", "https://github.com/pyca/cryptography"),
                new ModuleLibrary("Watchdog", "D√©tection d'activit√© suspecte.", "https://github.com/gorakhargosh/watchdog")
            }
        });

        ModuleCategories.Add(new ModuleCategory
        {
            Identifier = "AUTO2",
            Title = "ü§ñ Autonomie totale (planification + veille + cr√©ation)",
            Objective = "Permettre √† Eterna de travailler seule : veille concurrentielle, cr√©ation, correction, upload.",
            Impact = "Boucle autonome compl√®te de production.",
            Priority = "Critique",
            Icon = "ü§ñ",
            Libraries = new[]
            {
                new ModuleLibrary("OpenDevin", "Agents d'auto-d√©veloppement.", "https://github.com/OpenDevin/OpenDevin"),
                new ModuleLibrary("TaskWeaver", "Orchestration et planification IA.", "https://github.com/microsoft/TaskWeaver"),
                new ModuleLibrary("LangGraph", "Raisonnement par graphes d'agents.", "https://github.com/langchain-ai/langgraph"),
                new ModuleLibrary("APScheduler", "Planification locale des t√¢ches.", "https://github.com/agronholm/apscheduler"),
                new ModuleLibrary("AlphaCode", "R√©f√©rence IA auto-codage.", "https://github.com/deepmind/code_contests")
            }
        });
    }

    private void SeedOperationalData()
    {
        BackupVault.Clear();
        BackupVault.Add(new BackupRecord
        {
            Id = "AUTO_PATCH_20240605_221500",
            Timestamp = DateTime.Today.AddDays(-2).AddHours(22).AddMinutes(15),
            Scope = "Core + UI",
            Notes = "Backup complet avant refonte autonomie.",
            IsEncrypted = true
        });
        BackupVault.Add(new BackupRecord
        {
            Id = "AUTO_PATCH_20240606_104200",
            Timestamp = DateTime.Today.AddDays(-1).AddHours(10).AddMinutes(42),
            Scope = "Sandbox + mod√®les √©motionnels",
            Notes = "Snapshots √©motionnels synchronis√©s.",
            IsEncrypted = true
        });

        ChangeQueue.Clear();
        ChangeQueue.Add(new ChangeRequest
        {
            Id = "CR-221",
            Title = "Refonte pipeline backup pour fichiers volumineux",
            RiskLevel = "√âlev√©",
            RequiresApproval = true,
            CreatedAt = DateTime.Today.AddDays(-1).AddHours(9)
        });
        ChangeQueue.Add(new ChangeRequest
        {
            Id = "CR-222",
            Title = "Optimisation UI cycle d'auto-apprentissage",
            RiskLevel = "Faible",
            RequiresApproval = false,
            CreatedAt = DateTime.Today.AddHours(-5)
        });

        Watchers.Clear();
        Watchers.Add(new WatcherItem { Path = "sandbox/scripts", Purpose = "Validation des scripts g√©n√©r√©s", Mode = "Analyse statique + tests" });
        Watchers.Add(new WatcherItem { Path = "models/emotion", Purpose = "Mise √† jour des embeddings √©motionnels", Mode = "Diff" });
        Watchers.Add(new WatcherItem { Path = "configs/policies", Purpose = "Changements de s√©curit√©", Mode = "Audit" });

        AutonomyLogs.Clear();
        AutonomyLogs.Add(new AutonomyLogEntry
        {
            Id = "AUTO_PATCH_20240606_110501",
            Timestamp = DateTime.Today.AddDays(-1).AddHours(11).AddMinutes(5),
            Message = "Validation manuelle requise pour la mise √† jour s√©curit√© biom√©trique.",
            Status = "En attente"
        });
        AutonomyLogs.Add(new AutonomyLogEntry
        {
            Id = "AUTO_PATCH_20240607_083212",
            Timestamp = DateTime.Today.AddHours(-3).AddMinutes(-18),
            Message = "Tests sandbox compl√©t√©s pour la synchronisation iOS.",
            Status = "Succ√®s"
        });

        EmotionProfiles.Clear();
        EmotionProfiles.Add(new EmotionProfile
        {
            Name = "Serenity Boost",
            Signal = "Voix stable, rythme cardiaque normal",
            RecommendedAction = "Prioriser la planification de t√¢ches longues et strat√©giques."
        });
        EmotionProfiles.Add(new EmotionProfile
        {
            Name = "Focus Surge",
            Signal = "Ton ferme, pulsations acc√©l√©r√©es",
            RecommendedAction = "Lancer l'analyse concurrentielle et les tests de performance."
        });
        EmotionProfiles.Add(new EmotionProfile
        {
            Name = "Empathy Sync",
            Signal = "Expressions faciales positives d√©tect√©es",
            RecommendedAction = "Proposer des am√©liorations UI/UX et du contenu cr√©atif."
        });
    }

    private void CreateBackup()
    {
        var now = DateTime.Now;
        var backup = new BackupRecord
        {
            Id = $"AUTO_PATCH_{now:yyyyMMdd_HHmmss}",
            Timestamp = now,
            Scope = "Full Stack Local IA",
            Notes = "Snapshot g√©n√©r√© depuis le cockpit autonomie.",
            IsEncrypted = true
        };

        BackupVault.Insert(0, backup);
        StatusBanner = "Backup complet cr√©√© et chiffr√©.";
        AutonomyLogs.Insert(0, new AutonomyLogEntry
        {
            Id = backup.Id,
            Timestamp = now,
            Message = "Backup automatique d√©clench√© manuellement depuis l'interface.",
            Status = "Succ√®s"
        });
    }

    private void UpdateChangeStatus(ChangeRequest? change, string newStatus)
    {
        if (change is null)
        {
            StatusBanner = "Impossible de mettre √† jour la demande : s√©lection invalide.";
            return;
        }

        change.Status = newStatus;
        StatusBanner = $"{change.Id} ‚Üí {newStatus}.";
        AutonomyLogs.Insert(0, new AutonomyLogEntry
        {
            Id = change.Id,
            Timestamp = DateTime.Now,
            Message = $"La demande '{change.Title}' est pass√©e √† l'√©tat {newStatus}.",
            Status = newStatus
        });
        OnPropertyChanged(nameof(ChangeQueue));
    }
}
