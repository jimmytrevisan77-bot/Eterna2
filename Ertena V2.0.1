## 🧠 Prompt Codex – Projet Eterna v2.0.1 (Version LM Studio-Like)

### 🎯 Objectif global
Créer une application locale complète nommée **Eterna v2.0.1**, inspirée de **LM Studio** et basée sur le projet open-source **Jan (jan.ai)**.  
Eterna doit fonctionner **100 % offline-first**, avec accès Internet autorisé uniquement pour les mises à jour et intégrations cloud optionnelles.

Elle doit centraliser toutes les IA nécessaires :
- LLaMA 3 (langage local)
- Stable Diffusion XL + Refiner + Turbo (images)
- Coqui XTTS (voix parlée)
- Whisper (reconnaissance vocale FR)
- ESRGAN / Real-ESRGAN (super-résolution)
- Moteur émotionnel (analyse du ton et adaptation visuelle/vocale)
- Auto-coder (auto-correction et maintenance du code)
- Interface dynamique (fond réactif + avatar 3D)
- Intégration iOS distante (plus tard)

---

### 🧩 Architecture du projet (inspirée de LM Studio et Jan)

Eterna/
├── frontend/                     # Interface WPF (.NET 8)
│   ├── Eterna.sln
│   ├── App.xaml / MainWindow.xaml
│   ├── ViewModels/
│   ├── Views/
│   ├── Assets/
│   │   ├── logo.png
│   │   └── fond_dynamique.mp4
│   └── Config/
│       └── settings.json
│
├── backend/                      # Backend Python FastAPI
│   ├── main.py
│   ├── modules/
│   │   ├── llama_interface.py
│   │   ├── sdxl_interface.py
│   │   ├── coqui_tts.py
│   │   ├── whisper_stt.py
│   │   ├── esrgan_upscale.py
│   │   ├── emotion_engine.py
│   │   └── autocoder.py
│   ├── utils/
│   │   ├── file_manager.py
│   │   └── security_lock.py
│   ├── requirements.txt
│   └── config.json
│
├── assets/                       # Ressources audio/visuelles
│   ├── voix_coqui/
│   ├── models/
│   └── ui/
│
├── setup/                        # Installateur Windows
│   ├── Eterna_Installer.iss
│   └── icon.ico
│
├── docs/
│   └── README.md
│
└── .github/
    └── workflows/
        └── build_and_push.yml

---

### ⚙️ Stack technique
- **Frontend :** WPF (C#, .NET 8)
- **Backend :** Python 3.11 + FastAPI
- **Communication interne :** HTTP local (`localhost:5001`)
- **Installer :** Inno Setup 6
- **Contrôle de version :** Git + GitHub Actions
- **Base de développement :** Jan (jan.ai) → à adapter à Eterna

---

### 💬 Modules et fonctionnalités principales

#### 🔹 LLaMA 3
- Modèle local (quantisé GGUF) dans `C:\models\llama`
- Interface via `/backend/modules/llama_interface.py`
- Entrée texte → sortie texte
- Optimisation des performances à la demande (chargement dynamique)

#### 🔹 Stable Diffusion XL + Refiner + Turbo
- Localisé dans `C:\stable-diffusion\models`
- Génération d’images à la demande
- Upscale optionnel via ESRGAN

#### 🔹 Coqui XTTS (Voix)
- Synthèse vocale émotionnelle
- Voix féminine personnalisée
- Déclenchement automatique dès qu’une réponse texte est produite

#### 🔹 Whisper (Reconnaissance vocale)
- Reconnaissance vocale FR uniquement
- Détection automatique des commandes utilisateur
- Lancement de la réponse vocale sans clic (mode Jarvis)

#### 🔹 ESRGAN / Real-ESRGAN
- Upscale 4x pour les designs
- Exécution via `/backend/modules/esrgan_upscale.py`

#### 🔹 Emotion Engine
- Analyse du ton et du contenu
- Adapte :
  - la couleur du fond dynamique WPF
  - la tonalité et intensité de la voix Coqui

#### 🔹 AutoCoder
- Auto-analyse et correction des fichiers Python et C#
- Sauvegarde automatique avant modification
- Redémarre le backend après correction
- Journalisation dans `/backend/logs/autocoder.log`

---

### 🖥️ Interface WPF (inspirée LM Studio)

- Mode **sombre complet**
- Logo **Eternadream** discret (coin supérieur gauche)
- Fond dynamique animé (lié aux émotions)
- Historique de chat dans `/frontend/Logs/ChatHistory.txt`
- Mode **plein écran (F11)**
- **Panneau latéral** de configuration IA
- **Avatar 3D animé** (rotation, expressions faciales, synchronisation labiale)
- **Verrou de sécurité** (clic ou commande vocale "valide")

---

### 🔐 Sécurité
- Journal d’actions : `/backend/logs/actions.log`
- Verrouillage vocal ou manuel des fonctions critiques
- Aucun paiement, envoi réseau ou exécution script sans validation

---

### ⚙️ Backend – Endpoints FastAPI
- `/generate_text` → LLaMA 3
- `/generate_image` → SDXL / Refiner / Turbo
- `/tts` → Coqui
- `/stt` → Whisper
- `/upscale` → ESRGAN
- `/analyze_emotion` → moteur émotionnel
- `/autocode` → module d’auto-codage
- `/security/lock` → gestion du verrouillage

---

### 📦 Installation (Inno Setup)
Créer un installateur `.exe` :
1. Installe dans `C:\Eterna\Eterna_V2_0_1`
2. Crée un raccourci bureau et menu démarrer
3. Installe Python 3.11 + Node.js si absents
4. Télécharge les dépendances (pip install depuis `requirements.txt`)
5. Vérifie la présence des modèles :
C:\models\llama
C:\stable-diffusion\models
C:\coqui
C:\whisper
C:\esrgan\
6. Lance automatiquement `start_backend.bat` puis `Eterna.exe`
7. Ajoute option **Désinstaller proprement**

---

### 🔁 GitHub & Build Automatique
- Push GitHub automatique après build réussi
- Workflow Actions dans `.github/workflows/build_and_push.yml`
- Étapes :
1. Build du frontend + backend
2. Test local du backend
3. Push auto
4. Rollback en cas d’échec
- Commit : `"Auto-build Eterna v2.0.1 – [timestamp]"`

---

### 📜 README.md (auto-généré)
Doit inclure :
- Description complète du projet
- Installation étape par étape
- Fonctionnement de chaque module IA
- Commandes principales (build, run, update)
- Structure du projet
- Crédits Eternadream

---

### 🧱 Intégration du projet **Jan (jan.ai)**
Utiliser la base open-source du projet **Jan** disponible sur GitHub :  
👉 https://jan.ai  

Instructions :
1. Cloner le dépôt Jan.
2. Conserver l’architecture d’exécution locale.
3. Adapter le code pour intégrer les modules :
- LLaMA 3 (local)
- Stable Diffusion XL (visuel)
- Coqui XTTS (voix)
- Whisper (reconnaissance FR)
- ESRGAN (super-résolution)
4. Refonte complète de l’interface pour ressembler à **Eterna** (WPF sombre).
5. Remplacer les API cloud par les modèles locaux (offline-first).
6. Ajouter l’auto-coder et le verrou de sécurité.
7. Conserver la compatibilité multi-plateforme (Windows, macOS, Linux).

---

### 🧩 Résultat attendu
À la fin :
- L’application WPF est **fonctionnelle, compilée et exécutable**
- Le backend FastAPI tourne localement
- Les modules IA sont **chargés à la demande**
- Le setup Windows (`EternaInstaller.exe`) est généré
- Le dépôt GitHub reçoit le push automatique complet
- L’utilisateur peut lancer Eterna localement et parler directement avec elle

---

### 🛠️ Règles de Codex
- Aucun prompt de confirmation GitHub : push automatique.
- Tous les chemins doivent être relatifs au projet.
- Aucun blocage d’installation.
- Tous les commentaires en **français clair**.
- L’ensemble doit compiler et tourner directement sur Windows 10/11.

